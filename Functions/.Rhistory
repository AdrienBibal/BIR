data.new$MSE <- unlist(data.new$MSE)/2
eval.res.old <- rbind.data.frame(eval.res.old, data.new)
}
eval.res <- rbind.data.frame(eval.res.iBIR,
eval.res.others,
eval.res.old)
#### Code to run ####
source.files <- list.files(path = function.path)
sapply(source.files, function(x) source(file = paste0(function.path, x)))
cols <- c("black", brewer.pal(n = 9, "Set1")[c(1:5, 7:9)])
ltys <- 1:9
pchs <- 15:23
xy.vars <- c("perc.nonzero", "MSE")
xy.names <- c("mean % non-zero weights", "mean MSE")
group.by <- c("dataset", "lambda", "method", "m")
color.by <- c("method")
draw.by <- color.by
plot.by <- c("dataset", "m")
meth <- c("iBIR", "SRRR", "old SRRR", "BIR", "old BIR", "eigen PLS",
"old eigen PLS")
eval.res <- eval.res[which(eval.res$method %in% meth), ]
plot.data <- PreparePlotData(eval.res, xy.vars, group.by, color.by,
cols, ltys, pchs)
plot.type <- "MSE_vs_perc_nonzero"
legend.name <- "Method"
datasets <- unique(plot.data$dataset)
for (index.data in 1:length(datasets)){
wh.dataset <- which(plot.data$dataset == datasets[index.data])
embeddings <- unique(plot.data$m[wh.dataset])
for (index.embeddings in 1:length(embeddings)){
wh.plot <- which(plot.data$dataset == datasets[index.data] & plot.data$m == embeddings[index.embeddings])
plot.name <- paste0(datasets[index.data],
" dataset, m = ",
embeddings[index.embeddings])
pdf.name <- paste0(plot.path,
datasets[index.data],
"_",
embeddings[index.embeddings],
"_",
plot.type,
".pdf")
pdf(file = pdf.name, height = 8, width = 8)
PlotXY(data = plot.data[wh.plot, ],
xy.vars,
xy.names,
draw.by,
plot.name,
legend.name,
plot.xlab = T,
cex.legend = 0.9,
xlim = c(0, 1))
dev.off()
}
}
#######################################
#### Eval competitors all datasets ####
#######################################
rm(list = ls())
library(glmnet) # Lasso
library(pbapply)
library(GenSA) # simulated annealing
library(rrpack) # SRRR
library(chemometrics) # eigen PLS
library(vegan) # RDA
#### File paths ####
data.path <- "../Data/Datasets/"
out.path <- "../Data/Results/Tests/"
function.path <- "../Functions/"
#### Code to run ####
source.files <- list.files(path = function.path, recursive = TRUE)
invisible(sapply(source.files, function(x) source(file = paste0(function.path, x))))
load(file = paste0(data.path, "AAAI_MDS_data.RData"))
X.list <- Y.list # embeddings
load(paste0(data.path, "datasets.RData"))
Fe.list <- lapply(data.sets, function(x) x[["feat"]]) # external feature sets
lambda.vals <- seq(0.01, 0.45, length = 30)
max.deg <- 360
thetas <- (seq(0.1, max.deg, by = 0.1)/360)*2*pi
# index.data <- 2
# index.embeddings <- 16
# index.lambda <- 1
# Fe = Fe.list[[index.data]]
# X = X.list[[index.data]][[index.embeddings]]
# lambda = lambda.vals[index.lambda]
# data.name = names(data.sets)[index.data]
eval.res.others <- NULL
for (index.data in 1:length(X.list)){
m <- length(X.list[[index.data]])
#m <- min(length(X.list[[index.data]]),
#         ncol(Fe.list[[index.data]]) - 1)
for (index.embeddings in 1:m){
for (index.lambda in 1:length(lambda.vals)){
temp <- EvalCompetitors(Fe = Fe.list[[index.data]],
X = X.list[[index.data]][[index.embeddings]],
lambda = lambda.vals[index.lambda],
thetas = thetas,
data.name = names(data.sets)[index.data],
#methods = c("SRRR", "eigen PLS", "BIR"))
methods = c("SRRR"))
eval.res.others <- rbind.data.frame(eval.res.others, temp)
print(paste0("dataset ", index.data, "/", length(X.list),
", embedding ", index.embeddings, "/", m,
", lambda ", index.lambda, "/", length(lambda.vals)))
}
}
}
save(eval.res.others, file = paste0(out.path,"AAAI_eval_res_competitors.RData"))
save(eval.res.others, file = paste0(out.path,"AAAI_eval_res_competitors_v2.RData"), version = 2)
#######################
#### Plot Results  ####
#######################
rm(list = ls())
library(RColorBrewer) # color palette
#### File paths ####
data.path <- "../Data/Datasets/"
out.test.path <- "../Data/Results/Tests/"
out.path <- "../Data/Results/"
plot.path <- "../Plots/Test_Becca/"
function.path <- "../Functions/"
load(file = paste0(out.test.path,"AAAI_eval_res_competitors.RData"))
load(file = paste0(out.path,"AAAI_eval_res_iBIR.RData"))
load(file = paste0(out.path,"eval_res_8_7_18b.RData"))
d <- 2*c(15, 13, 4, 5, 5)
#### Prepare eval.res old ####
eval.res.old <- NULL
for (i in 1:length(eval.res)){
data.new <- eval.res[[i]][, c(1, 4, 2, 2, 8, 6)]
data.new <- cbind.data.frame(data.new, iter = NA, m = 2)
colnames(data.new) <- colnames(eval.res.others)
method.new <- paste0(data.new$method)
method.new[which(data.new$method == "BIR")] <- "old BIR"
method.new[which(data.new$method == "eigen PLS")] <- "old eigen PLS"
method.new[which(data.new$method == "SRRR")] <- "old SRRR"
data.new$method <- factor(method.new)
data.new$perc.nonzero <- unlist(data.new$perc.nonzero)/d[i]
data.new$MSE <- unlist(data.new$MSE)/2
eval.res.old <- rbind.data.frame(eval.res.old, data.new)
}
eval.res <- rbind.data.frame(eval.res.iBIR,
eval.res.others,
eval.res.old)
#### Code to run ####
source.files <- list.files(path = function.path)
sapply(source.files, function(x) source(file = paste0(function.path, x)))
cols <- c("black", brewer.pal(n = 9, "Set1")[c(1:5, 7:9)])
ltys <- 1:9
pchs <- 15:23
xy.vars <- c("perc.nonzero", "MSE")
xy.names <- c("mean % non-zero weights", "mean MSE")
group.by <- c("dataset", "lambda", "method", "m")
color.by <- c("method")
draw.by <- color.by
plot.by <- c("dataset", "m")
meth <- c("iBIR", "SRRR", "old SRRR", "BIR", "old BIR", "eigen PLS",
"old eigen PLS")
eval.res <- eval.res[which(eval.res$method %in% meth), ]
plot.data <- PreparePlotData(eval.res, xy.vars, group.by, color.by,
cols, ltys, pchs)
plot.type <- "MSE_vs_perc_nonzero"
legend.name <- "Method"
datasets <- unique(plot.data$dataset)
for (index.data in 1:length(datasets)){
wh.dataset <- which(plot.data$dataset == datasets[index.data])
embeddings <- unique(plot.data$m[wh.dataset])
for (index.embeddings in 1:length(embeddings)){
wh.plot <- which(plot.data$dataset == datasets[index.data] & plot.data$m == embeddings[index.embeddings])
plot.name <- paste0(datasets[index.data],
" dataset, m = ",
embeddings[index.embeddings])
pdf.name <- paste0(plot.path,
datasets[index.data],
"_",
embeddings[index.embeddings],
"_",
plot.type,
".pdf")
pdf(file = pdf.name, height = 8, width = 8)
PlotXY(data = plot.data[wh.plot, ],
xy.vars,
xy.names,
draw.by,
plot.name,
legend.name,
plot.xlab = T,
cex.legend = 0.9,
xlim = c(0, 1))
dev.off()
}
}
#######################################
#### Eval competitors all datasets ####
#######################################
rm(list = ls())
library(glmnet) # Lasso
library(pbapply)
library(GenSA) # simulated annealing
library(rrpack) # SRRR
library(chemometrics) # eigen PLS
library(vegan) # RDA
#### File paths ####
data.path <- "../Data/Datasets/"
out.path <- "../Data/Results/Tests/"
function.path <- "../Functions/"
#### Code to run ####
source.files <- list.files(path = function.path, recursive = TRUE)
invisible(sapply(source.files, function(x) source(file = paste0(function.path, x))))
load(file = paste0(data.path, "AAAI_MDS_data.RData"))
X.list <- Y.list # embeddings
load(paste0(data.path, "datasets.RData"))
Fe.list <- lapply(data.sets, function(x) x[["feat"]]) # external feature sets
lambda.vals <- seq(0.01, 0.45, length = 30)
max.deg <- 360
thetas <- (seq(0.1, max.deg, by = 0.1)/360)*2*pi
# index.data <- 2
# index.embeddings <- 16
# index.lambda <- 1
# Fe = Fe.list[[index.data]]
# X = X.list[[index.data]][[index.embeddings]]
# lambda = lambda.vals[index.lambda]
# data.name = names(data.sets)[index.data]
eval.res.others <- NULL
for (index.data in 1:length(X.list)){
m <- length(X.list[[index.data]])
#m <- min(length(X.list[[index.data]]),
#         ncol(Fe.list[[index.data]]) - 1)
for (index.embeddings in 1:m){
for (index.lambda in 1:length(lambda.vals)){
temp <- EvalCompetitors(Fe = Fe.list[[index.data]],
X = X.list[[index.data]][[index.embeddings]],
lambda = lambda.vals[index.lambda],
thetas = thetas,
data.name = names(data.sets)[index.data],
#methods = c("SRRR", "eigen PLS", "BIR"))
methods = c("SRRR"))
eval.res.others <- rbind.data.frame(eval.res.others, temp)
print(paste0("dataset ", index.data, "/", length(X.list),
", embedding ", index.embeddings, "/", m,
", lambda ", index.lambda, "/", length(lambda.vals)))
}
}
}
save(eval.res.others, file = paste0(out.path,"AAAI_eval_res_competitors.RData"))
save(eval.res.others, file = paste0(out.path,"AAAI_eval_res_competitors_v2.RData"), version = 2)
#######################
#### Plot Results  ####
#######################
rm(list = ls())
library(RColorBrewer) # color palette
#### File paths ####
data.path <- "../Data/Datasets/"
out.test.path <- "../Data/Results/Tests/"
out.path <- "../Data/Results/"
plot.path <- "../Plots/Test_Becca/"
function.path <- "../Functions/"
load(file = paste0(out.test.path,"AAAI_eval_res_competitors.RData"))
load(file = paste0(out.path,"AAAI_eval_res_iBIR.RData"))
load(file = paste0(out.path,"eval_res_8_7_18b.RData"))
d <- 2*c(15, 13, 4, 5, 5)
#### Prepare eval.res old ####
eval.res.old <- NULL
for (i in 1:length(eval.res)){
data.new <- eval.res[[i]][, c(1, 4, 2, 2, 8, 6)]
data.new <- cbind.data.frame(data.new, iter = NA, m = 2)
colnames(data.new) <- colnames(eval.res.others)
method.new <- paste0(data.new$method)
method.new[which(data.new$method == "BIR")] <- "old BIR"
method.new[which(data.new$method == "eigen PLS")] <- "old eigen PLS"
method.new[which(data.new$method == "SRRR")] <- "old SRRR"
data.new$method <- factor(method.new)
data.new$perc.nonzero <- unlist(data.new$perc.nonzero)/d[i]
data.new$MSE <- unlist(data.new$MSE)/2
eval.res.old <- rbind.data.frame(eval.res.old, data.new)
}
eval.res <- rbind.data.frame(eval.res.iBIR,
eval.res.others,
eval.res.old)
#### Code to run ####
source.files <- list.files(path = function.path)
sapply(source.files, function(x) source(file = paste0(function.path, x)))
cols <- c("black", brewer.pal(n = 9, "Set1")[c(1:5, 7:9)])
ltys <- 1:9
pchs <- 15:23
xy.vars <- c("perc.nonzero", "MSE")
xy.names <- c("mean % non-zero weights", "mean MSE")
group.by <- c("dataset", "lambda", "method", "m")
color.by <- c("method")
draw.by <- color.by
plot.by <- c("dataset", "m")
meth <- c("iBIR", "SRRR", "old SRRR", "BIR", "old BIR", "eigen PLS",
"old eigen PLS")
eval.res <- eval.res[which(eval.res$method %in% meth), ]
plot.data <- PreparePlotData(eval.res, xy.vars, group.by, color.by,
cols, ltys, pchs)
plot.type <- "MSE_vs_perc_nonzero"
legend.name <- "Method"
datasets <- unique(plot.data$dataset)
for (index.data in 1:length(datasets)){
wh.dataset <- which(plot.data$dataset == datasets[index.data])
embeddings <- unique(plot.data$m[wh.dataset])
for (index.embeddings in 1:length(embeddings)){
wh.plot <- which(plot.data$dataset == datasets[index.data] & plot.data$m == embeddings[index.embeddings])
plot.name <- paste0(datasets[index.data],
" dataset, m = ",
embeddings[index.embeddings])
pdf.name <- paste0(plot.path,
datasets[index.data],
"_",
embeddings[index.embeddings],
"_",
plot.type,
".pdf")
pdf(file = pdf.name, height = 8, width = 8)
PlotXY(data = plot.data[wh.plot, ],
xy.vars,
xy.names,
draw.by,
plot.name,
legend.name,
plot.xlab = T,
cex.legend = 0.9,
xlim = c(0, 1))
dev.off()
}
}
#######################################
#### Eval competitors all datasets ####
#######################################
rm(list = ls())
library(glmnet) # Lasso
library(pbapply)
library(GenSA) # simulated annealing
library(rrpack) # SRRR
library(chemometrics) # eigen PLS
library(vegan) # RDA
#### File paths ####
data.path <- "../Data/Datasets/"
out.path <- "../Data/Results/Tests/"
function.path <- "../Functions/"
#### Code to run ####
source.files <- list.files(path = function.path, recursive = TRUE)
invisible(sapply(source.files, function(x) source(file = paste0(function.path, x))))
load(file = paste0(data.path, "AAAI_MDS_data.RData"))
X.list <- Y.list # embeddings
load(paste0(data.path, "datasets.RData"))
Fe.list <- lapply(data.sets, function(x) x[["feat"]]) # external feature sets
lambda.vals <- seq(0.01, 0.45, length = 30)
max.deg <- 360
thetas <- (seq(0.1, max.deg, by = 0.1)/360)*2*pi
# index.data <- 2
# index.embeddings <- 16
# index.lambda <- 1
# Fe = Fe.list[[index.data]]
# X = X.list[[index.data]][[index.embeddings]]
# lambda = lambda.vals[index.lambda]
# data.name = names(data.sets)[index.data]
eval.res.others <- NULL
for (index.data in 1:length(X.list)){
m <- length(X.list[[index.data]])
#m <- min(length(X.list[[index.data]]),
#         ncol(Fe.list[[index.data]]) - 1)
for (index.embeddings in 1:m){
for (index.lambda in 1:length(lambda.vals)){
temp <- EvalCompetitors(Fe = Fe.list[[index.data]],
X = X.list[[index.data]][[index.embeddings]],
lambda = lambda.vals[index.lambda],
thetas = thetas,
data.name = names(data.sets)[index.data],
#methods = c("SRRR", "eigen PLS", "BIR"))
methods = c("eigen PLS"))
eval.res.others <- rbind.data.frame(eval.res.others, temp)
print(paste0("dataset ", index.data, "/", length(X.list),
", embedding ", index.embeddings, "/", m,
", lambda ", index.lambda, "/", length(lambda.vals)))
}
}
}
save(eval.res.others, file = paste0(out.path,"AAAI_eval_res_competitors.RData"))
save(eval.res.others, file = paste0(out.path,"AAAI_eval_res_competitors_v2.RData"), version = 2)
#######################
#### Plot Results  ####
#######################
rm(list = ls())
library(RColorBrewer) # color palette
#### File paths ####
data.path <- "../Data/Datasets/"
out.test.path <- "../Data/Results/Tests/"
out.path <- "../Data/Results/"
plot.path <- "../Plots/Test_Becca/"
function.path <- "../Functions/"
load(file = paste0(out.test.path,"AAAI_eval_res_competitors.RData"))
load(file = paste0(out.path,"AAAI_eval_res_iBIR.RData"))
load(file = paste0(out.path,"eval_res_8_7_18b.RData"))
d <- 2*c(15, 13, 4, 5, 5)
#### Prepare eval.res old ####
eval.res.old <- NULL
for (i in 1:length(eval.res)){
data.new <- eval.res[[i]][, c(1, 4, 2, 2, 8, 6)]
data.new <- cbind.data.frame(data.new, iter = NA, m = 2)
colnames(data.new) <- colnames(eval.res.others)
method.new <- paste0(data.new$method)
method.new[which(data.new$method == "BIR")] <- "old BIR"
method.new[which(data.new$method == "eigen PLS")] <- "old eigen PLS"
method.new[which(data.new$method == "SRRR")] <- "old SRRR"
data.new$method <- factor(method.new)
data.new$perc.nonzero <- unlist(data.new$perc.nonzero)/d[i]
data.new$MSE <- unlist(data.new$MSE)/2
eval.res.old <- rbind.data.frame(eval.res.old, data.new)
}
eval.res <- rbind.data.frame(eval.res.iBIR,
eval.res.others,
eval.res.old)
#### Code to run ####
source.files <- list.files(path = function.path)
sapply(source.files, function(x) source(file = paste0(function.path, x)))
cols <- c("black", brewer.pal(n = 9, "Set1")[c(1:5, 7:9)])
ltys <- 1:9
pchs <- 15:23
xy.vars <- c("perc.nonzero", "MSE")
xy.names <- c("mean % non-zero weights", "mean MSE")
group.by <- c("dataset", "lambda", "method", "m")
color.by <- c("method")
draw.by <- color.by
plot.by <- c("dataset", "m")
meth <- c("iBIR", "SRRR", "old SRRR", "BIR", "old BIR", "eigen PLS",
"old eigen PLS")
eval.res <- eval.res[which(eval.res$method %in% meth), ]
plot.data <- PreparePlotData(eval.res, xy.vars, group.by, color.by,
cols, ltys, pchs)
plot.type <- "MSE_vs_perc_nonzero"
legend.name <- "Method"
datasets <- unique(plot.data$dataset)
for (index.data in 1:length(datasets)){
wh.dataset <- which(plot.data$dataset == datasets[index.data])
embeddings <- unique(plot.data$m[wh.dataset])
for (index.embeddings in 1:length(embeddings)){
wh.plot <- which(plot.data$dataset == datasets[index.data] & plot.data$m == embeddings[index.embeddings])
plot.name <- paste0(datasets[index.data],
" dataset, m = ",
embeddings[index.embeddings])
pdf.name <- paste0(plot.path,
datasets[index.data],
"_",
embeddings[index.embeddings],
"_",
plot.type,
".pdf")
pdf(file = pdf.name, height = 8, width = 8)
PlotXY(data = plot.data[wh.plot, ],
xy.vars,
xy.names,
draw.by,
plot.name,
legend.name,
plot.xlab = T,
cex.legend = 0.9,
xlim = c(0, 1))
dev.off()
}
}
#######################################
#### Eval competitors all datasets ####
#######################################
rm(list = ls())
library(glmnet) # Lasso
library(pbapply)
library(GenSA) # simulated annealing
library(rrpack) # SRRR
library(chemometrics) # eigen PLS
library(vegan) # RDA
#### File paths ####
data.path <- "../Data/Datasets/"
out.path <- "../Data/Results/Tests/"
function.path <- "../Functions/"
#### Code to run ####
source.files <- list.files(path = function.path, recursive = TRUE)
invisible(sapply(source.files, function(x) source(file = paste0(function.path, x))))
load(file = paste0(data.path, "AAAI_MDS_data.RData"))
X.list <- Y.list # embeddings
load(paste0(data.path, "datasets.RData"))
Fe.list <- lapply(data.sets, function(x) x[["feat"]]) # external feature sets
lambda.vals <- seq(0.01, 0.45, length = 30)
max.deg <- 360
thetas <- (seq(0.1, max.deg, by = 0.1)/360)*2*pi
# index.data <- 2
# index.embeddings <- 16
# index.lambda <- 1
# Fe = Fe.list[[index.data]]
# X = X.list[[index.data]][[index.embeddings]]
# lambda = lambda.vals[index.lambda]
# data.name = names(data.sets)[index.data]
eval.res.others <- NULL
for (index.data in 1:length(X.list)){
m <- length(X.list[[index.data]])
#m <- min(length(X.list[[index.data]]),
#         ncol(Fe.list[[index.data]]) - 1)
for (index.embeddings in 1:m){
for (index.lambda in 1:length(lambda.vals)){
temp <- EvalCompetitors(Fe = Fe.list[[index.data]],
X = X.list[[index.data]][[index.embeddings]],
lambda = lambda.vals[index.lambda],
thetas = thetas,
data.name = names(data.sets)[index.data],
methods = c("SRRR", "eigen PLS", "BIR"))
eval.res.others <- rbind.data.frame(eval.res.others, temp)
print(paste0("dataset ", index.data, "/", length(X.list),
", embedding ", index.embeddings, "/", m,
", lambda ", index.lambda, "/", length(lambda.vals)))
}
}
}
save(eval.res.others, file = paste0(out.path,"AAAI_eval_res_competitors.RData"))
save(eval.res.others, file = paste0(out.path,"AAAI_eval_res_competitors_v2.RData"), version = 2)
